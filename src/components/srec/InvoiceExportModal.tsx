import React, { useState } from 'react';
import { SRECInvoice } from '../../types/srecTypes';
import './InvoiceModals.css';

interface InvoiceExportModalProps {
  isOpen: boolean;
  invoice: SRECInvoice | null;
  onClose: () => void;
}

type ExportFormat = 'pdf' | 'csv';

const InvoiceExportModal: React.FC<InvoiceExportModalProps> = ({ isOpen, invoice, onClose }) => {
  const [format, setFormat] = useState<ExportFormat>('pdf');

  if (!isOpen || !invoice) return null;

  const getMimeType = (f: ExportFormat): string => (f === 'pdf' ? 'application/pdf' : 'text/csv');

  const generateContent = (inv: SRECInvoice, f: ExportFormat): string => {
    if (f === 'csv') {
      return [
        'Field,Value',
        `Invoice Number,${inv.invoiceNumber}`,
        `Customer,${inv.customerName}`,
        `Email,${inv.customerEmail}`,
        `Total SRECs,${inv.totalSRECs}`,
        `Price Per SREC,${inv.pricePerSREC}`,
        `Subtotal,${inv.subtotal}`,
        `Fees,${inv.brokerageFee + inv.processingFee}`,
        `Taxes,${inv.taxes}`,
        `Total,${inv.totalAmount}`,
        `Issue Date,${new Date(inv.issueDate).toLocaleDateString()}`,
        `Due Date,${new Date(inv.dueDate).toLocaleDateString()}`
      ].join('\n');
    }
    // simple text placeholder for PDF
    return `Invoice ${inv.invoiceNumber}\nCustomer: ${inv.customerName}\nTotal: $${inv.totalAmount}\nIssue: ${new Date(inv.issueDate).toLocaleDateString()}  Due: ${new Date(inv.dueDate).toLocaleDateString()}\n\nGenerated by Energy Services.`;
  };

  const handleExport = () => {
    if (!invoice) return;
    const content = generateContent(invoice, format);
    const blob = new Blob([content], { type: getMimeType(format) });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${invoice.invoiceNumber}.${format}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    onClose();
  };

  return (
    <div className="modal-backdrop" onClick={onClose}>
      <div className="invoice-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h3 className="modal-title">Export / Download</h3>
          <button className="modal-close-btn" onClick={onClose} aria-label="Close">Ã—</button>
        </div>
        <div className="modal-content">
          <div className="form-grid" style={{ gridTemplateColumns: '1fr' }}>
            <div className="form-group">
              <label>Format</label>
              <select value={format} onChange={(e) => setFormat(e.target.value as ExportFormat)}>
                <option value="pdf">PDF</option>
                <option value="csv">CSV</option>
              </select>
            </div>
          </div>
        </div>
        <div className="modal-footer">
          <button className="modal-secondary-btn" onClick={onClose}>Cancel</button>
          <button className="modal-primary-btn" onClick={handleExport}>Download</button>
        </div>
      </div>
    </div>
  );
};

export default InvoiceExportModal;
